import{_ as n,o as s,c as a,e as t}from"./app.663dc18a.js";const p={},e=t(`<h1 id="different-methods-of-authentication" tabindex="-1"><a class="header-anchor" href="#different-methods-of-authentication" aria-hidden="true">#</a> Different methods of authentication</h1><p>You have many ways to create an authentication flow, which will be partially covered here.</p><h2 id="delay-method" tabindex="-1"><a class="header-anchor" href="#delay-method" aria-hidden="true">#</a> Delay method</h2><p>As seen before, doing a <code>lightdm.respond</code> inmediately after a <code>lightdm.authenticate</code> provokes a failed authentication. So we need to add a delay of 100ms or more.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">initGreeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  lightdm<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token string">&quot;superuser&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  lightdm<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">&quot;superpassword&quot;</span><span class="token punctuation">)</span>
  lightdm<span class="token punctuation">.</span><span class="token function">start_session</span><span class="token punctuation">(</span><span class="token string">&quot;ubuntu&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;GreeterReady&quot;</span><span class="token punctuation">,</span> initGreeter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="signals-approach" tabindex="-1"><a class="header-anchor" href="#signals-approach" aria-hidden="true">#</a> Signals approach</h2><p><strong>web-greeter</strong> provides signals to do automatic stuff when something happens from LightDM or web-greeter itself. The most relevant ones for this case are:</p><ul><li><code>lightdm.show_prompt</code> to provide the password automatically.</li><li><code>lightdm.authentication_complete</code> to start_session automatically.</li></ul><p>So, you could have something like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>lightdm<span class="token punctuation">.</span>show_prompt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  lightdm<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
lightdm<span class="token punctuation">.</span>authentication_complete<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  lightdm<span class="token punctuation">.</span><span class="token function">start_session</span><span class="token punctuation">(</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

lightdm<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Everything is handled by signals from here</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lightdm-respond-and-lightdm-show-prompt" tabindex="-1"><a class="header-anchor" href="#lightdm-respond-and-lightdm-show-prompt" aria-hidden="true">#</a> lightdm.respond and lightdm.show_prompt</h3><p>Aditionally, you could check the type provided to the callback of <code>lightdm.show_prompt</code> to either <strong>respond</strong> with the user or <strong>respond</strong> with the password.</p><p><code>lightdm.respond</code>, as documented, provides a response to a prompt. Therefore, if you do not start the authentication process with an user, LightDM will prompt to provide it. You can experiment with it on <code>--debug</code> mode:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> lightdm<span class="token punctuation">.</span>show_prompt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text<span class="token punctuation">,</span> type<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> lightdm<span class="token punctuation">.</span>authentication_complete<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Authenticated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> lightdm<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;login:&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span> lightdm<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Password:&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span> lightdm<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token string">&quot;Authenticated&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>According to this, LightDM provides two kind of prompts:</p><ul><li><code>{text: &quot;login:&quot;, type: 0}</code> when no <strong>user</strong> provided to <code>lightdm.authenticate</code><ul><li>Then, use <code>lightdm.respond(&quot;user&quot;)</code></li><li>If user provided with <code>lightdm.authenticate</code>, LightDM will prompt for a password</li></ul></li><li><code>{text: &quot;Password:&quot;, type: 1}</code> after providing an <strong>user</strong><ul><li>Use <code>lightdm.respond(&quot;password&quot;)</code></li></ul></li></ul><p>And so, you could have something like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>lightdm<span class="token punctuation">.</span>show_prompt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// Login</span>
    lightdm<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Password</span>
    lightdm<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
lightdm<span class="token punctuation">.</span>authentication_complete<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  lightdm<span class="token punctuation">.</span><span class="token function">start_session</span><span class="token punctuation">(</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

lightdm<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="manual-approach" tabindex="-1"><a class="header-anchor" href="#manual-approach" aria-hidden="true">#</a> Manual approach</h2><p>This might be the simplest to implement, but will require a nice web design to not mess everything up.</p><p>Basically, the authentication flow is &quot;managed&quot; by the user:</p><ol><li>The user selects their user, and run <code>lightdm.authenticate(user)</code></li><li>They will provide their password, and run <code>lightdm.respond(password)</code></li><li>And so, they click on something that will run their selected session: <code>lightdm.start_session(session)</code></li></ol>`,22),o=[e];function c(i,u){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","auth_methods.html.vue"]]);export{r as default};
